name: Geomag Ingest (Swarm only)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "37 4 * * *"

jobs:
  ingest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ðŸ‘‡ REPLACE your old ingest step with THIS one
      - name: Run Swarm ingest (fallback up to 10 days)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          VIRES_TOKEN: ${{ secrets.VIRES_TOKEN }}
        run: |
          set +e
          for d in 1 2 3 4 5 6 7 8 9 10; do
            START=$(date -u -d "$d days ago 00:00" +'%Y-%m-%dT%H:%M:%SZ')
            END=$(date -u -d "$((d-1)) days ago 00:00" +'%Y-%m-%dT%H:%M:%SZ')
            echo "Trying window: $START â†’ $END"
            START="$START" END="$END" python etl/ingest_swarm_test.py
            rc=$?
            if [ $rc -eq 0 ]; then
              echo "Success: data ingested for $START â†’ $END"
              exit 0
            elif [ $rc -eq 2 ]; then
              echo "No data for that day; falling back a dayâ€¦"
              continue
            else
              echo "Transient error (rc=$rc). Retrying onceâ€¦"
              START="$START" END="$END" python etl/ingest_swarm_test.py
              rc=$?
              if [ $rc -eq 0 ]; then
                echo "Success after retry for $START â†’ $END"
                exit 0
              elif [ $rc -eq 2 ]; then
                echo "No data; falling back a dayâ€¦"
                continue
              else
                echo "Hard failure (rc=$rc). Falling back a day anywayâ€¦"
                continue
              fi
            fi
          done
          echo "No Swarm data found in the last 10 days."
          exit 1

      # keep your retention step AFTER this
            - name: Retain only last 7 days at 1Hz (chunked + verbose)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          set -euo pipefail

          CUTOFF=$(date -u -d "7 days ago 00:00" +'%Y-%m-%dT%H:%M:%SZ')
          echo "Cutoff: $CUTOFF"

          BASE="$SUPABASE_URL/rest/v1/swarm_l1b?ts=lt.$CUTOFF"
          H_COMMON=(
            -H "apikey: $SUPABASE_SERVICE_KEY"
            -H "Authorization: Bearer $SUPABASE_SERVICE_KEY"
            -H "Content-Profile: geomag"
            -H "Accept-Profile: geomag"
          )

          # quick count (via Content-Range header)
          echo "Counting rows older than cutoff..."
          COUNT_HDR=$(curl -sS -i "${H_COMMON[@]}" -H "Prefer: count=exact" "$BASE&select=ts&limit=1" | tr -d '\r' | sed -n 's/^Content-Range: .*\/\([0-9]*\).*/\1/pI')
          COUNT=${COUNT_HDR:-0}
          echo "Rows to consider: $COUNT"

          # delete in batches; PostgREST allows limit+order on DELETE
          BATCH=50000
          i=0
          while : ; do
            # stop if nothing left (defensive)
            LEFT=$(curl -sS -i "${H_COMMON[@]}" -H "Prefer: count=exact" "$BASE&select=ts&limit=1" | tr -d '\r' | sed -n 's/^Content-Range: .*\/\([0-9]*\).*/\1/pI')
            LEFT=${LEFT:-0}
            echo "Remaining older-than-cutoff: $LEFT"
            [ "$LEFT" -eq 0 ] && break

            echo "DELETE batch $((++i)) (up to $BATCH rows)..."
            # show body on error so we can see real message
            CODE=$(curl -sS -w "%{http_code}" -o /tmp/del.out \
              "${H_COMMON[@]}" \
              -X DELETE "$BASE&order=ts.asc&limit=$BATCH")
            if [ "$CODE" = "204" ]; then
              echo "Batch $i OK (204)."
            elif [ "$CODE" = "404" ]; then
              echo "Endpoint/filter returned 404 (nothing to delete or schema not exposed)."
              cat /tmp/del.out || true
              break
            else
              echo "DELETE returned HTTP $CODE. Response:"
              cat /tmp/del.out || true
              exit 1
            fi
          done

          echo "Retention step complete."

